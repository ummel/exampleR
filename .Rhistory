eq <- gsub(" * 1", "", gsub(":", " * ", paste(sprintf("%s * %s", m, names(m)), collapse = " + ")), fixed = TRUE)
#------
# pred <- setdiff(names(test), "y")
# fit0 <- lm(y ~ ., data = test)
# fit0 <- lm(y ~ poly(income, 1, raw = T) * poly(elec, 1, raw = T), data = test)
#fit <- lm(formula = formula(paste0("y ~ ", paste0("poly(", pred, ", degree = 3, raw = TRUE)"))), data = test)
#fit2 <- as.stepfun(isoreg(x = test$income, y = test$y))
#library(MonoPoly)
#fit3 <- monpol(y ~income, data = test, degree = 5, monotone = "increasing")
# Check fit
# plot(test)
# lines(x = test$income, y = predict(fit0, data.frame(income = test$income)), col = 2)
# lines(x = test$income, y = predict(fit0, data.frame(income = test$income)), col = 3)
#-----
out <- subset(nd, select = c(mrate, div_pre, div_post))
out$cost <- eq
out
#out <- subset(nd, select = c(mrate, div_pre, div_post))
out <- nd
out$cost <- eq
out
View(out)
out <- subset(nd, select = c(mrate, div_pre, div_post))
out$cost <- eq
out
nd
#nd <- data.frame(state = "Texas", hhsize = 4, minors = 2, age = 50, income = 50e3, elec = 100)
nd <- data.frame(state = "Texas", hhsize = 4, minors = 2, age = 50)
# Adult pre-tax dividend amount
div.adult <- 377
# Estimate household marginal tax rate
nd$adults <- nd$hhsize - nd$minors
nd$mrate <- 0.15
# Calculate pre- and post-tax dividends
nd$div_pre <- round(div.adult * nd$adults + 0.5 * div.adult * pmin(2, nd$minors))
nd$div_post <- round(nd$div_pre * (1 - nd$mrate))
#------
# Predict the slider preset values
for (x in ls(pattern = "fitted_model")[-1]) {
m <- get(x)
nd[[m$response.name]] <- round(predict.gbm(m, newdata = nd, n.trees = m$n.trees))
}
#------
# How does variation in income affect the result
slide <- plot.gbm(fitted_model0, i.var = c("income", "elec"), n.trees = fitted_model$n.trees, return.grid = TRUE, continuous.resolution = 50)
f <- "y ~ income + elec + income:elec"
fit0 <- lm(formula = formula(f), data = slide)
# Create a character vector giving the equation expression to be evaluated using the slider variables as inputs
m <- prettyNum(signif(coef(fit0), 4))
names(m)[1] <- "1"
eq <- gsub(" * 1", "", gsub(":", " * ", paste(sprintf("%s * %s", m, names(m)), collapse = " + ")), fixed = TRUE)
#------
# pred <- setdiff(names(test), "y")
# fit0 <- lm(y ~ ., data = test)
# fit0 <- lm(y ~ poly(income, 1, raw = T) * poly(elec, 1, raw = T), data = test)
#fit <- lm(formula = formula(paste0("y ~ ", paste0("poly(", pred, ", degree = 3, raw = TRUE)"))), data = test)
#fit2 <- as.stepfun(isoreg(x = test$income, y = test$y))
#library(MonoPoly)
#fit3 <- monpol(y ~income, data = test, degree = 5, monotone = "increasing")
# Check fit
# plot(test)
# lines(x = test$income, y = predict(fit0, data.frame(income = test$income)), col = 2)
# lines(x = test$income, y = predict(fit0, data.frame(income = test$income)), col = 3)
#-----
out <- subset(nd, select = c(mrate, div_pre, div_post))
out$cost <- eq
out$eq
out$cost
1131*(1-0.15)
nd
d <- read_rds("~/Documents/Projects/CCL/Data/Spatial/ZCTA 2010 with state identifiers.rds")
dim(d)
head(d)
head(d@data)
g <- read_csv("~/Documents/Projects/CCL/Data/Spatial/Master State-Region Concordance File.csv")
dim(g)
head(g)
head(d)
head(d@data)
head(g)
pred
select(zip5, state_fips) %>%
filter(!duplicated(zip)) %>%
inner_join(select(g, st, state.name)))
select(zip5, state_fips) %>%
filter(!duplicated(zip)) %>%
inner_join(select(g, st, state.name))
head(d)
head(d@data)
head(g)
zip <- d@data %>%
rename(st = state_fips) %>%
select(zip5, state_fips) %>%
filter(!duplicated(zip)) %>%
inner_join(select(g, st, state.name))
zip <- d@data %>%
rename(st = state_fips)
zip <- d@data %>%
rename(st = state_fips) %>%
select(zip5, st) %>%
filter(!duplicated(zip)) %>%
inner_join(select(g, st, state.name))
head(zip)
zip_lookup <- d@data %>%
rename(st = state_fips) %>%
select(zip5, st) %>%
filter(!duplicated(zip)) %>%
inner_join(select(g, st, state.name)) %>%
select(zip5, state.name) %>%
rename(zip = zip5, state = state.name)
dim(zip_lookup)
head(zip_lookup)
head(duplicated(zip_lookup$zip))
zip_lookup <- d@data %>%
rename(st = state_fips) %>%
select(zip5, st) %>%
filter(!duplicated(zip5)) %>%
inner_join(select(g, st, state.name)) %>%
select(zip5, state.name) %>%
rename(zip = zip5, state = state.name)
head(zip_lookup)
# Save model object to disk as .rda object
save(zip_lookupo, file = "data/zip_lookup.rda")
# Save model object to disk as .rda object
save(zip_lookup, file = "data/zip_lookup.rda")
pred
head(zip_lookup)
View(zip_lookup)
class(zip_lookup$zip)
# Testing:
#nd <- data.frame(state = "Texas", hhsize = 4, minors = 2, age = 50, income = 50e3, elec = 100)
nd <- data.frame(zip = "80524", hhsize = 4, minors = 2, age = 50)
# Assign geographic variables to 'nd' using zip code provided
nd <- merge(nd, zip_lookup)
nd
# Adult pre-tax dividend amount
div.adult <- 377
# Estimate household marginal tax rate
nd$adults <- nd$hhsize - nd$minors
nd$mrate <- 0.15
# Calculate pre- and post-tax dividends
nd$div_pre <- round(div.adult * nd$adults + 0.5 * div.adult * pmin(2, nd$minors))
nd$div_post <- round(nd$div_pre * (1 - nd$mrate))
for (x in ls(pattern = "fitted_model")[-1]) {
m <- get(x)
nd[[m$response.name]] <- round(predict.gbm(m, newdata = nd, n.trees = m$n.trees))
}
nd
?data
data()
class(data())
as.vector(data())
str(data())
data(package = .packages(all.available = TRUE))
ls("/Data")
ls("data")
ls("/data")
?ls
list.files("data")
head(nd)
#nd <- data.frame(state = "Texas", hhsize = 4, minors = 2, age = 50, income = 50e3, elec = 100)
nd <- data.frame(zip = "80524", hhsize = 4, minors = 2, age = 50)
# Assign geographic variables to 'nd' using zip code provided
nd <- merge(nd, zip_lookup)
# Adult pre-tax dividend amount
div.adult <- 377
# Estimate household marginal tax rate
nd$adults <- nd$hhsize - nd$minors
nd$mrate <- 0.15
# Calculate pre- and post-tax dividends
nd$div_pre <- round(div.adult * nd$adults + 0.5 * div.adult * pmin(2, nd$minors))
nd$div_post <- round(nd$div_pre * (1 - nd$mrate))
nd
ls(pattern = "fitted_model")
for (x in ls(pattern = "fitted_model")[-1]) {
m <- get(x)
nd[[m$response.name]] <- round(predict.gbm(m, newdata = nd, n.trees = m$n.trees))
}
nd
#nd <- data.frame(state = "Texas", hhsize = 4, minors = 2, age = 50, income = 50e3, elec = 100)
nd <- data.frame(zip = "80524", hhsize = 4, minors = 2, age = 50)
# Assign geographic variables to 'nd' using zip code provided
nd <- merge(nd, zip_lookup)
# Adult pre-tax dividend amount
div.adult <- 377
# Estimate household marginal tax rate
nd$adults <- nd$hhsize - nd$minors
nd$mrate <- 0.15
# Calculate pre- and post-tax dividends
nd$div_pre <- round(div.adult * nd$adults + 0.5 * div.adult * pmin(2, nd$minors))
nd$div_post <- round(nd$div_pre * (1 - nd$mrate))
nd
x in ls(pattern = "fitted_model")[-1][1]
x
x
m <- get(x)
predict.gbm(m, newdata = nd, n.trees = m$n.trees)
class(nd$state)
zip_lookup <- d@data %>%
rename(st = state_fips) %>%
select(zip5, st) %>%
filter(!duplicated(zip5)) %>%
inner_join(select(g, st, state.name)) %>%
select(zip5, state.name) %>%
rename(zip = zip5, state = factor(state.name))
d <- read_rds("~/Documents/Projects/CCL/Data/Spatial/ZCTA 2010 with state identifiers.rds")
g <- read_csv("~/Documents/Projects/CCL/Data/Spatial/Master State-Region Concordance File.csv")
zip_lookup <- d@data %>%
rename(st = state_fips) %>%
select(zip5, st) %>%
filter(!duplicated(zip5)) %>%
inner_join(select(g, st, state.name)) %>%
select(zip5, state.name) %>%
rename(zip = zip5, state = factor(state.name))
# Save model object to disk as .rda object
save(zip_lookup, file = "data/zip_lookup.rda")
zip_lookup <- d@data %>%
rename(st = state_fips) %>%
select(zip5, st) %>%
filter(!duplicated(zip5)) %>%
inner_join(select(g, st, state.name)) %>%
rename(zip = zip5) %>%
mutate(state = factor(state.name)) %>%
select(zip5, state)
zip_lookup <- d@data %>%
rename(st = state_fips) %>%
select(zip5, st) %>%
filter(!duplicated(zip5)) %>%
inner_join(select(g, st, state.name)) %>%
rename(zip = zip5) %>%
mutate(state = factor(state.name)) %>%
select(zip, state)
head(zip_looku)
head(zip_lookup)
# Save model object to disk as .rda object
save(zip_lookup, file = "data/zip_lookup.rda")
nd <- data.frame(zip = "80524", hhsize = 4, minors = 2, age = 50)
# Assign geographic variables to 'nd' using zip code provided
nd <- merge(nd, zip_lookup)
# Adult pre-tax dividend amount
div.adult <- 377
# Estimate household marginal tax rate
nd$adults <- nd$hhsize - nd$minors
nd$mrate <- 0.15
# Calculate pre- and post-tax dividends
nd$div_pre <- round(div.adult * nd$adults + 0.5 * div.adult * pmin(2, nd$minors))
nd$div_post <- round(nd$div_pre * (1 - nd$mrate))
class(nd$state)
predict.gbm(m, newdata = nd, n.trees = m$n.trees)
for (x in ls(pattern = "fitted_model")[-1]) {
m <- get(x)
nd[[m$response.name]] <- round(predict.gbm(m, newdata = nd, n.trees = m$n.trees))
}
?merge
nd <- data.frame(zip = "80524", hhsize = 4, minors = 2, age = 50)
# Assign geographic variables to 'nd' using zip code provided
nd <- merge(nd, zip_lookup)
# Adult pre-tax dividend amount
div.adult <- 377
# Estimate household marginal tax rate
nd$adults <- nd$hhsize - nd$minors
nd$mrate <- 0.15
# Calculate pre- and post-tax dividends
nd$div_pre <- round(div.adult * nd$adults + 0.5 * div.adult * pmin(2, nd$minors))
nd$div_post <- round(nd$div_pre * (1 - nd$mrate))
#------
# Predict the slider preset values
for (x in ls(pattern = "fitted_model")[-1]) {
m <- get(x)
nd[[m$response.name]] <- round(predict.gbm(m, newdata = nd, n.trees = m$n.trees))
}
#------
# How does variation in income affect the result
slide <- plot.gbm(fitted_model0, i.var = c("income", "elec"), n.trees = fitted_model$n.trees, return.grid = TRUE, continuous.resolution = 50)
f <- "y ~ income + elec + income:elec"
fit0 <- lm(formula = formula(f), data = slide)
# Create a character vector giving the equation expression to be evaluated using the slider variables as inputs
m <- prettyNum(signif(coef(fit0), 4))
names(m)[1] <- "1"
eq <- gsub(" * 1", "", gsub(":", " * ", paste(sprintf("%s * %s", m, names(m)), collapse = " + ")), fixed = TRUE)
#------
# pred <- setdiff(names(test), "y")
# fit0 <- lm(y ~ ., data = test)
# fit0 <- lm(y ~ poly(income, 1, raw = T) * poly(elec, 1, raw = T), data = test)
#fit <- lm(formula = formula(paste0("y ~ ", paste0("poly(", pred, ", degree = 3, raw = TRUE)"))), data = test)
#fit2 <- as.stepfun(isoreg(x = test$income, y = test$y))
#library(MonoPoly)
#fit3 <- monpol(y ~income, data = test, degree = 5, monotone = "increasing")
# Check fit
# plot(test)
# lines(x = test$income, y = predict(fit0, data.frame(income = test$income)), col = 2)
# lines(x = test$income, y = predict(fit0, data.frame(income = test$income)), col = 3)
#-----
out <- subset(nd, select = c(mrate, div_pre, div_post))
out$cost <- eq
out
summary(fitted_model0)
summary(fitted_model1)
summary(fitted_model2)
?roxygen
library(roxygen)
library(roxygen2)
?rosygen2
?roxygen2
roxygenize()
roxygenize()
?importFrom
library(exampleR)
library(exampleR)
pred
library(exampleR)
input <- data.frame(zip = "80524", hhsize = 4, minors = 2, age = 50)
predictModel(input)
library(exampleR)
input
predictModel(input)
out
library(exampleR)
library(exampleR)
roxygen2::roxygenise()
library(exampleR)
input <- data.frame(zip = "80524", hhsize = 4, minors = 2, age = 50)
predictModel(input)
# Assign geographic variables to 'nd' using zip code provided
nd <- merge(nd, zip_lookup)
# Adult pre-tax dividend amount
div.adult <- 377
# Estimate household marginal tax rate
nd$adults <- nd$hhsize - nd$minors
nd$mrate <- 0.15
# Calculate pre- and post-tax dividends
nd$div_pre <- round(div.adult * nd$adults + 0.5 * div.adult * pmin(2, nd$minors))
nd$div_post <- round(nd$div_pre * (1 - nd$mrate))
#------
# Predict the slider preset values
for (x in ls(pattern = "fitted_model")[-1]) {
m <- get(x)
nd[[m$response.name]] <- round(predict.gbm(m, newdata = nd, n.trees = m$n.trees))
}
nd
library(exampleR)
ls()
library(exampleR)
ls()
?.onLoad
data(list(ls("data")))
data(list = list.files("data"))
list.files
list.files("data")
list.files("data", full.names = T)
data(list = list.files("data", full.names = T))
list.files("data", full.names = T)
library(exampleR)
predictModel()
predictModel
data()
data(fitted_model0)
data(fitted_model1)
data(fitted_model2)
data("zip_lookup")
input <- data.frame(zip = "80524", hhsize = 4, minors = 2, age = 50)
predictModel(input)
library(gbm)
library(tidyverse)
elec <- read_rds("~/Documents/Projects/CCL/Data/Results/Household category expenditure and emissions 2012.rds")
head(elec)
unique(elec$cat)
elec <- read_rds("~/Documents/Projects/CCL/Data/Results/Household category expenditure and emissions 2012.rds") %>%
filter(cat %in% c("Utilities", "Gasoline"), year == 2012, expend > 0)
head(elec)
# Temporary: Using total utilities expenditure at household level to proxy for monthly electricity expenditure
elec <- read_rds("~/Documents/Projects/CCL/Data/Results/Household category expenditure and emissions 2012.rds") %>%
filter(cat %in% c("Utilities", "Gasoline"), year == 2012, expend > 0) %>%
temp <- elec %>%
select(id, cat, expend) %>%
spread(cat, expend)
head(elec)
temp <- elec %>%
select(id, cat, expend) %>%
spread(cat, expend)
head(temp)
spend <- read_rds("~/Documents/Projects/CCL/Data/Results/Household category expenditure and emissions 2012.rds") %>%
filter(cat %in% c("Utilities", "Gasoline"), year == 2012, expend > 0) %>%
select(id, cat, expend) %>%
spread(cat, expend) %>%
rename(gasoline = Gasoline, electricity = utilities)  # Temporary: Using total utilities expenditure at household level to proxy for monthly electricity expenditure
d <- read_rds("~/Documents/Projects/CCL/Data/Results/Policy simulation results by household.rds")
spend <- read_rds("~/Documents/Projects/CCL/Data/Results/Household category expenditure and emissions 2012.rds") %>%
filter(cat %in% c("Utilities", "Gasoline"), year == 2012, expend > 0) %>%
select(id, cat, expend) %>%
spread(cat, expend) %>%
rename(gasoline = Gasoline, electricity = Utilities)  # Temporary: Using total utilities expenditure at household level to proxy for monthly electricity expenditure
mutate(electricity = electricity * 1400 / mean(electricity),
electricity = electricity / 12)  # Set the mean to around $1400 per year
spend <- read_rds("~/Documents/Projects/CCL/Data/Results/Household category expenditure and emissions 2012.rds") %>%
filter(cat %in% c("Utilities", "Gasoline"), year == 2012, expend > 0) %>%
select(id, cat, expend) %>%
spread(cat, expend) %>%
rename(gasoline = Gasoline, electricity = Utilities) %>%   # Temporary: Using total utilities expenditure at household level to proxy for monthly electricity expenditure
mutate(electricity = electricity * 1400 / mean(electricity),
electricity = electricity / 12)  # Set the mean to around $1400 per year
spend <- read_rds("~/Documents/Projects/CCL/Data/Results/Household category expenditure and emissions 2012.rds") %>%
filter(cat %in% c("Utilities", "Gasoline"), year == 2012, expend > 0) %>%
select(id, cat, expend) %>%
spread(cat, expend) %>%
rename(gasoline = Gasoline, electricity = Utilities) %>%   # Temporary: Using total utilities expenditure at household level to proxy for monthly electricity expenditure
mutate(electricity = electricity * 1400 / mean(electricity),
electricity = electricity / 12,  # Set the electricity mean to around $1400 per year
gasoline = gasoline / 52) # Weekly average gasoline expenditure
# Adult pre-tax dividend amount
filter(d, np == 1, nc == 0)$div_pre[1]
dset <- d %>%
filter(year == 2012) %>%
rename(state = state.name, hhsize = np, minors = nc, income = hinc) %>%
mutate(state = factor(state)) %>%
inner_join(spend) %>%
filter(income > 0, income < quantile(income, 0.95), electricity < quantile(electricity, 0.95)) %>%  # Restrict income and electricity expenditure within reasonable bounds
select(hw, state, hhsize, minors, age, income, electricity, gasoline, cost_co2) %>%
sample_frac(0.05)
dset <- d %>%
filter(year == 2012) %>%
rename(state = state.name, hhsize = np, minors = nc, income = hinc) %>%
mutate(state = factor(state)) %>%
inner_join(spend)
head(dset)
head(spend)
summary(spend)
spend <- read_rds("~/Documents/Projects/CCL/Data/Results/Household category expenditure and emissions 2012.rds") %>%
filter(cat %in% c("Utilities", "Gasoline"), year == 2012, expend > 0) %>%
select(id, cat, expend) %>%
spread(cat, expend) %>%
rename(gas = Gasoline, elec = Utilities)
head(spend)
summary(spend)
# Household level spending
spend <- read_rds("~/Documents/Projects/CCL/Data/Results/Household category expenditure and emissions 2012.rds") %>%
filter(cat %in% c("Utilities", "Gasoline"), year == 2012, expend > 0) %>%
select(id, cat, expend) %>%
spread(cat, expend, fill = 0) %>%
rename(gas = Gasoline, elec = Utilities) %>%   # Temporary: Using total utilities expenditure at household level to proxy for monthly electricity expenditure
mutate(elec = elec * 1400 / mean(electricity),
elec = elec / 12,  # Monthly electricity expenditure; set the mean to $1400 per year
gas = gas / 52) # Weekly average gasoline expenditure
# Household level spending
spend <- read_rds("~/Documents/Projects/CCL/Data/Results/Household category expenditure and emissions 2012.rds") %>%
filter(cat %in% c("Utilities", "Gasoline"), year == 2012, expend > 0) %>%
select(id, cat, expend) %>%
spread(cat, expend, fill = 0) %>%
rename(gas = Gasoline, elec = Utilities) %>%   # Temporary: Using total utilities expenditure at household level to proxy for monthly electricity expenditure
mutate(elec = elec * 1400 / mean(elec),
elec = elec / 12,  # Monthly electricity expenditure; set the mean to $1400 per year
gas = gas / 52) # Weekly average gasoline expenditure
dset <- d %>%
filter(year == 2012) %>%
rename(state = state.name, hhsize = np, minors = nc, income = hinc) %>%
mutate(state = factor(state)) %>%
inner_join(spend) %>%
filter(income > 0, income < quantile(income, 0.95), elec < quantile(elec, 0.95)) %>%  # Restrict income and electricity expenditure within reasonable bounds
select(hw, state, hhsize, minors, age, income, elec, gas, cost_co2) %>%
sample_frac(0.05)
dim(dset)
head(dset)
summary(dset)
# Create vector of predictor variables
pred <- setdiff(names(dset), c("hw", "cost_co2"))
pred
# Vector giving the var.monotone integer (-1, 0, 1) for each predictor variable
# Zero (no relationship) is the default
mono <- rep(0, length(pred))
mono[which(pred %in% c("elec", "gas"))] <- 1
# Fit GBM model #0
# This model uses the full set of predictors
fitted_model0 <- gbm(formula = formula(paste0("cost_co2 ~ ", paste(pred, collapse = "+"))),
distribution = "gaussian",
data = dset,
weights = dset$hw,
var.monotone = mono,
n.trees = 1500,
interaction.depth = length(pred),
keep.data = FALSE)
# Save model object to disk as .rda object
save(fitted_model0, file = "data/fitted_model0.rda")
#----------
# Fit GBM model #1 - income
# This model uses ONLY the non-slider predictors  (slider predictors are assumed to be those where 'mono' == 1)
fitted_model1 <- gbm(formula = formula(paste0("elec ~ ", paste(pred[mono != 1], collapse = "+"))),
distribution = "gaussian",
data = dset,
weights = dset$hw,
#var.monotone = mono,
n.trees = 1500,
interaction.depth = length(pred),
keep.data = FALSE)
# Save model object to disk as .rda object
save(fitted_model1, file = "data/fitted_model1.rda")
# Fit GBM model #2 - elec
# This model uses ONLY the non-slider predictors (slider predictors are assumed to be those where 'mono' == 1)
fitted_model2 <- gbm(formula = formula(paste0("gas ~ ", paste(pred[mono != 1], collapse = "+"))),
distribution = "gaussian",
data = dset,
weights = dset$hw,
#var.monotone = mono,
n.trees = 1500,
interaction.depth = length(pred),
keep.data = FALSE)
# Save model object to disk as .rda object
save(fitted_model2, file = "data/fitted_model2.rda")
summary(nd)
round(377 * 2 + 0.5 * div.adult * 1
)
round(377 * 2 + 0.5 * 377 * 1
)
